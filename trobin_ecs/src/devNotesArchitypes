Entity ID:
- 8-bit mem. block ID, 24-bit 

High-density, low-variance entities ("Sparse Archetypes")
- 

** PROBABLY NOT WORTH PURSUING** Low-density, high-variance entities ("Saturated Archetype"):
- Have a collection of arrays that have all possible components for managing a few high-variance entities
	- e.g. the signature for the architype is 1111 1111 1111 1111 1111 1111 1111 1111
- There would also be an additional component that would represent the actual archetype of the given entity
	- e.g. 

** PROBABLY NOT WORTH PURSUING** Managing the Saturated Archetype:
- Option 1: Every cycle, count the number of each type of archetype, if count(x) > y, create a new archetype?
- Option 2: Run a daemon in the background that counts the number of entities created per archetype
	- Once it gets above 

- 


***Below From Jan 16, 2024***

Architype management probably is going to require MetaFunctions. Tuples of components too, maybe.
- Rather than hard-coding every possible combination of elements, I could have a MetaFunction that takes a tuple of all the component types and knows how to:
- - calculate size of arrays and
- - lay the arrays of components in its memory block



https://www.youtube.com/watch?v=_yqIdYBdyPo&t=69s
In MetaPrograms:
decltype(t) returns the typeof t

No std::find
No for/while loops in template metaprograms, use recursion


Variadic Templates accept an arbitrary number of arguments of varying types
https://www.youtube.com/watch?v=GusZ4P_iTks&t=30s
The examples here don't use perfect forwarding.
Perfect forwarding deals with the problem of rvalues vs lvalues, whether something is a reference or the object, etc.
- lvalues have a defined region of storage, and can provide an address
- rvalues do not, and include literals, results of operators, and function calls that return nonreferences. Does not necessarily have storage associated w/ it.

Perfect Forwarding video:
https://www.youtube.com/watch?v=c5dQX6GV_4g

Cont'd May 11, 2024:
- Singleton Architype Manager:
	- Have an array of uint32, where each 